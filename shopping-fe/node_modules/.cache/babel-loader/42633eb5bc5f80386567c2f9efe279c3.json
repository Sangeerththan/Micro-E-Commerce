{"ast":null,"code":"import { CREATE_USER, USERNAME_AVAILABILITY, RESET_USER_DATA, PROCEED_TO_LOGIN, AUTHENTICATE_USER_SUCCESS, AUTHENTICATE_USER_FAILED, PAST_SHOPPING, GET_USER_DATA } from '../types';\nexport const createUser = user => async dispatch => {\n  const url = \"http://localhost:8080/register\";\n  let res = await fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(user.user),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  res = await res.json();\n  dispatch({\n    type: CREATE_USER,\n    payload: res\n  });\n\n  if (res) {\n    dispatch({\n      type: PROCEED_TO_LOGIN,\n      payload: res\n    });\n  }\n};\nexport const authenticateUser = user => async dispatch => {\n  const url = \"http://localhost:8080/authenticate\";\n  let res = await fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(user),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  res = await res.json();\n\n  if (res.status === 401) {\n    dispatch({\n      type: AUTHENTICATE_USER_FAILED,\n      payload: res\n    });\n  } else {\n    res.username = user.username;\n    dispatch({\n      type: AUTHENTICATE_USER_SUCCESS,\n      payload: res\n    });\n  }\n};\nexport const isUsernameAvailable = username => async dispatch => {\n  const url = \"http://localhost:8080/isUsernameAvailable\";\n  console.log(username);\n  let res = await fetch(url, {\n    method: 'POST',\n    body: username,\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  res = await res.json();\n  dispatch({\n    type: USERNAME_AVAILABILITY,\n    payload: res\n  });\n};\nexport const getPastShopping = payload => async dispatch => {\n  const url = \"http://localhost:8080/getShopping\";\n  let res = await fetch(url, {\n    method: 'POST',\n    body: payload.username,\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': payload.token\n    }\n  });\n  res = await res.json();\n  dispatch({\n    type: PAST_SHOPPING,\n    payload: res\n  });\n};\nexport const getUserData = payload => async dispatch => {\n  const url = \"http://localhost:8080/getUserData\";\n  let res = await fetch(url, {\n    method: 'POST',\n    body: payload.username,\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': payload.token\n    }\n  });\n  res = await res.json();\n  dispatch({\n    type: GET_USER_DATA,\n    payload: res\n  });\n};\nexport const resetData = () => async dispatch => {\n  dispatch({\n    type: RESET_USER_DATA,\n    payload: true\n  });\n};","map":{"version":3,"sources":["/home/sangee/Desktop/2021/projects/Micro-E-Commerce/shopping-fe/src/redux/actions/UserActions.js"],"names":["CREATE_USER","USERNAME_AVAILABILITY","RESET_USER_DATA","PROCEED_TO_LOGIN","AUTHENTICATE_USER_SUCCESS","AUTHENTICATE_USER_FAILED","PAST_SHOPPING","GET_USER_DATA","createUser","user","dispatch","url","res","fetch","method","body","JSON","stringify","headers","json","type","payload","authenticateUser","status","username","isUsernameAvailable","console","log","getPastShopping","token","getUserData","resetData"],"mappings":"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","sourcesContent":["import { CREATE_USER, USERNAME_AVAILABILITY, RESET_USER_DATA, PROCEED_TO_LOGIN, AUTHENTICATE_USER_SUCCESS, AUTHENTICATE_USER_FAILED, PAST_SHOPPING, GET_USER_DATA } from '../types';\n\nexport const createUser = (user) => async (dispatch) => {\n    const url = \"http://localhost:8080/register\";\n    let res = await fetch(url, {method: 'POST', body:JSON.stringify(user.user), headers: {\n        'Content-Type': 'application/json'\n    }} );\n    res = await res.json();\n    dispatch({ type: CREATE_USER, payload: res});\n    if (res){\n        dispatch({ type: PROCEED_TO_LOGIN, payload: res})\n    }\n}\n\nexport const authenticateUser = (user) => async (dispatch) => {\n    const url = \"http://localhost:8080/authenticate\";\n    let res = await fetch(url, {method: 'POST', body:JSON.stringify(user), headers: {\n        'Content-Type': 'application/json'\n    }} );\n    res = await res.json();\n    if (res.status === 401){\n        dispatch({ type: AUTHENTICATE_USER_FAILED, payload: res});\n    } else {\n        res.username = user.username;\n        dispatch({ type: AUTHENTICATE_USER_SUCCESS, payload: res});\n    }\n\n}\n\nexport const isUsernameAvailable = (username) => async (dispatch) => {\n    const url = \"http://localhost:8080/isUsernameAvailable\";\n    console.log(username);\n    let res = await fetch(url, {method: 'POST', body:username, headers: {\n        'Content-Type': 'application/json',\n        \n    }} );\n    res = await res.json();\n    dispatch({ type: USERNAME_AVAILABILITY, payload: res})\n}\n\nexport const getPastShopping = (payload) => async (dispatch) => {\n    const url = \"http://localhost:8080/getShopping\";\n    let res = await fetch(url, {method: 'POST', body:payload.username, headers: {\n        'Content-Type': 'application/json',\n        'Authorization' : payload.token\n    }} );\n    res = await res.json();\n    dispatch({ type: PAST_SHOPPING, payload: res})\n}\n\nexport const getUserData = (payload) => async (dispatch) => {\n    const url = \"http://localhost:8080/getUserData\";\n    let res = await fetch(url, {method: 'POST', body:payload.username, headers: {\n        'Content-Type': 'application/json',\n        'Authorization' : payload.token\n    }} );\n    res = await res.json();\n    dispatch({ type: GET_USER_DATA, payload: res})\n}\n\nexport const resetData = () => async (dispatch) => {\n    dispatch({type: RESET_USER_DATA, payload: true})\n}"]},"metadata":{},"sourceType":"module"}